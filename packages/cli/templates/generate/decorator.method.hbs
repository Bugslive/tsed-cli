export interface {{symbolName}}Options {

}

export function {{symbolName}}(options: {{symbolName}}Options): MethodDecorator {
  return <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => {
    const originalMethod = descriptor.value;

    descriptor.value = function wrappedMethod (...args: any[]) {
      // do something before
      const result = originalMethod.apply(this, args)
      // do something after
      return result
    };
  };
}
