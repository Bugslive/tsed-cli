import {writeFile} from "node:fs/promises";
import path, {dirname, join} from "node:path";
import {join as joinPosix} from "node:path/posix";

import {globby} from "globby";

function preprocess(str) {
  return str.replace(/\./g, "\u0001").replace(/\//g, "\u0002");
}

function compare(a, b) {
  const pa = preprocess(a);
  const pb = preprocess(b);
  return pa < pb ? -1 : pa > pb ? 1 : 0;
}

async function generateIndex(directory, {cwd, excluded, noSemicolon, singleQuotes}) {
  const baseIndex = join(cwd, directory?.path ?? directory);

  const files = await globby(["**/*.{ts,tsx}", "!index.{ts,tsx}", ...excluded], {
    cwd: path.join(cwd, directory)
  });
  const quote = singleQuotes ? "'" : '"';

  const exports = files
    .sort((a, b) => compare(a, b))
    .map((file) => {
      // TODO set .js after all configuration are ok to resolve .js
      return `export * from ${quote}./${file.replace(".ts", ".js")}${quote}${noSemicolon ? "" : ";"}`;
    });

  const content = ["/**", " * @file Automatically generated by @tsed/barrels.", " */", ...exports];

  await writeFile(join(baseIndex, "index.ts"), content.join("\n") + "\n", {encoding: "utf8"});
}

export async function generateBarrels({exclude, directory, cwd, noSemicolon, singleQuotes}) {
  const excluded = exclude.map((path) => `!${path}`).concat(directory.map((path) => `!${path}/index.ts`));

  const directories = (
    await globby(
      directory.map((d) => {
        return joinPosix(d, "*");
      }),
      {
        cwd
      }
    )
  ).reduce((set, file) => {
    return set.add(dirname(file));
  }, new Set());

  const promises = [...directories.keys()].map((directory) =>
    generateIndex(directory, {
      excluded,
      cwd,
      noSemicolon,
      singleQuotes
    })
  );

  await Promise.all(promises);
}
